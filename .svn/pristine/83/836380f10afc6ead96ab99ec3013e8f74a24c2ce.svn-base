{
  "uid" : "3e05c0666e0063f7",
  "name" : "test_addcount_by_admin",
  "fullName" : "commen.admin_manger_account.test_addacount_by_admin#test_addcount_by_admin",
  "historyId" : "c9f61f99a75624d67034a18398762bb8",
  "time" : {
    "start" : 1630492373588,
    "stop" : 1630492373925,
    "duration" : 337
  },
  "status" : "broken",
  "statusMessage" : "simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "def test_addcount_by_admin():\n        url=request_config.host+request_config.admin_manger_addcount_url\n        data=request_config.admin_manger_addcount_data\n>       requests_result=requests.post(url=url,data=data.encode('utf-8'),headers=eval(request_config.worare_header)).json()\n\ncommen\\admin_manger_account\\test_addacount_by_admin.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\applicationpath\\pythonpath\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nc:\\applicationpath\\pythonpath\\lib\\site-packages\\simplejson\\__init__.py:525: in loads\n    return _default_decoder.decode(s)\nc:\\applicationpath\\pythonpath\\lib\\site-packages\\simplejson\\decoder.py:370: in decode\n    obj, end = self.raw_decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x000001EBF8B024C0>\ns = 'IntegrityError at /zz/api/grant_permission/\\n(1062, \"Duplicate entry \\'l11\\' for key \\'auth_user.username\\'\")\\n\\nRequ...ile. Change that to False, and Django will\\ndisplay a standard page generated by the handler for this status code.\\n\\n'\nidx = 0, _w = <built-in method match of re.Pattern object at 0x000001EBF6695C30>, _PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nc:\\applicationpath\\pythonpath\\lib\\site-packages\\simplejson\\decoder.py:400: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "commen.admin_manger_account"
  }, {
    "name" : "suite",
    "value" : "test_addacount_by_admin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-DHV6DED"
  }, {
    "name" : "thread",
    "value" : "60364-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "commen.admin_manger_account.test_addacount_by_admin"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "3e05c0666e0063f7.json",
  "parameterValues" : [ ]
}